name: Laravel Pint

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  pint:
    runs-on: ubuntu-latest
    outputs:
      pint-json: ${{ steps.emit-pint-json.outputs.pint-json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Set up Herd Lite (PHP 8.3)
        env:
          TERM: xterm
          PHP_VERSION: 8.3
        run: |
          curl -sSL https://php.new/install/linux | bash

      - name: Add Herd binaries to PATH
        run: echo "$HOME/.config/herd-lite/bin" >> $GITHUB_PATH

      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "directory=$(composer config --absolute cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Restore Composer & vendor cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.directory }}
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          composer install \
            --prefer-dist \
            --no-progress \
            --no-interaction \
            --no-scripts

      - name: Run Laravel Pint with JSON output
        id: run-pint
        run: |
          echo "Running Pint on ${{ github.head_ref }} against base commit ${{ github.event.pull_request.base.sha }}"
          ./vendor/bin/pint --test --format=json --diff=${{ github.event.pull_request.base.sha }} \
            > pint-output.json || true

      - name: Emit Pint JSON output
        id: emit-pint-json
        run: |
          ONE_LINE_JSON=$(jq -c . pint-output.json)
          echo "pint-json=$ONE_LINE_JSON" >> $GITHUB_OUTPUT

  comment-results:
    needs: pint
    runs-on: ubuntu-latest
    steps:
      - name: Generate list of files needing fixes
        run: |
          jq -r '.files[].name' <<< '${{ needs.pint.outputs.pint-json }}' > files-to-fix.txt

      - name: Show summary of Pint fixes
        run: |
          if [ ! -s files-to-fix.txt ]; then
            echo "_No formatting issues found! ðŸŽ‰_"
          else
            echo "Files requiring formatting fixes:"
            cat files-to-fix.txt
          fi

      - name: Build PR comment Markdown
        id: build-comment
        run: |
          if [ ! -s files-to-fix.txt ]; then
            FIX_TABLE="_No formatting issues found! ðŸŽ‰_"
          else
            FIX_TABLE=$(
             {
               echo "| File |"
               echo "| ---- |"
               while IFS= read -r file; do
                 echo "| \`$file\` |"
               done < files-to-fix.txt
             }
            )
          fi
          {
            echo "<!-- pint-comment -->"
            echo ""
            echo "# Laravel Pint Results"
            echo ""
            echo "## Between `${{ github.event.pull_request.base.sha }}` and `${{ github.head_ref }}`"
            echo ""
            echo "## ðŸš¨ Files Needing Formatting Fixes"
            echo ""
            printf "%s\n" "$FIX_TABLE"
          } > pint-comment.md
          echo "comment-file=pint-comment.md" >> $GITHUB_OUTPUT

      - name: Create or update Pint comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('pint-comment.md', 'utf8');
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              per_page: 100
            });
            const marker = '<!-- pint-comment -->';
            const existing = comments.find(c => c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
