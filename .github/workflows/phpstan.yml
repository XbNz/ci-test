name: PHPStan

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]

jobs:
  phpstan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: pr-tip
            ref: ${{ github.head_ref }}
          - name: target-branch
            ref: ${{ github.event.pull_request.base.ref }}
    outputs:
      pr-tip-phpstan-json: ${{ steps.emit-pr-tip-json.outputs.pr-tip-json }}
      target-branch-phpstan-json: ${{ steps.emit-target-json.outputs.target-branch-json }}
    steps:
      - name: Checkout code (${{ matrix.name }})
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.ref }}

      - name: Set up Herd Lite (PHP 8.3)
        env:
          TERM: xterm
          PHP_VERSION: 8.3
        run: |
          curl -sSL https://php.new/install/linux | bash

      - name: Add Herd binaries to PATH
        run: echo "$HOME/.config/herd-lite/bin" >> $GITHUB_PATH

      - name: Get Composer cache directory
        id: composer-cache
        run: |
          echo "directory=$(composer config --absolute cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Restore Composer & vendor cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.composer-cache.outputs.directory }}
            vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: |
          composer install \
            --prefer-dist \
            --no-progress \
            --no-interaction \
            --no-scripts

      - name: Restore PHPStan result cache
        uses: actions/cache@v4
        with:
          path: tmp
          key: phpstan-result-cache-${{ github.run_id }}
          restore-keys: |
            phpstan-result-cache-

      - name: Run PHPStan and produce JSON
        id: run-phpstan
        run: |
          php vendor/bin/phpstan analyze \
            --memory-limit=2G \
            --configuration=phpstan.neon \
            --error-format=json \
            > phpstan-output.json || true
          jq . phpstan-output.json > /dev/null
          echo "json=$(jq -c . < phpstan-output.json)" >> $GITHUB_OUTPUT

      - name: Save PHPStan cache
        uses: actions/cache@v4
        if: ${{ !cancelled() }}
        with:
          path: tmp
          key: phpstan-result-cache-${{ github.run_id }}

      - name: Emit pr-tip output
        id: emit-pr-tip-json
        if: ${{ matrix.name == 'pr-tip' }}
        run: |
          echo "pr-tip-json<<EOF" >> $GITHUB_OUTPUT
          echo "${{ steps.run-phpstan.outputs.json }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Emit target-branch output
        id: emit-target-json
        if: ${{ matrix.name == 'target-branch' }}
        run: |
          echo "target-branch-json<<EOF" >> $GITHUB_OUTPUT
          echo "${{ steps.run-phpstan.outputs.json }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  compare-results:
    needs: phpstan
    runs-on: ubuntu-latest
    steps:
      - name: Reconstruct “pr-tip” JSON file
        run: |
          printf '%s' "${{ needs.phpstan.outputs.pr-tip-phpstan-json }}" > pr-tip-phpstan.json

      - name: Reconstruct “target-branch” JSON file
        run: |
          printf '%s' "${{ needs.phpstan.outputs.target-branch-phpstan-json }}" > target-branch-phpstan.json

      - name: Generate introduced-errors.json
        shell: bash
        env:
          JQ_FILTER: |
            def errs($json):
              $json.files
              | to_entries
              | map(
                  .key as $file
                  | .value.messages[]
                  | {
                      file: $file,
                      message: .message,
                      line: .line,
                      ignorable: .ignorable,
                      identifier: .identifier
                    }
                );
            (.[0] | errs(.)) as $prErrors
            | (.[1] | errs(.)) as $targetErrors
            | $prErrors
            | map(
                select(
                  ($targetErrors | index(.)) == null
                )
              )
        run: |
          jq -s -f <(printf '%s' "$JQ_FILTER") pr-tip-phpstan.json target-branch-phpstan.json > introduced-errors.json

      - name: Generate removed-errors.json
        shell: bash
        env:
          JQ_FILTER: |
            def errs($json):
              $json.files
              | to_entries
              | map(
                  .key as $file
                  | .value.messages[]
                  | {
                      file: $file,
                      message: .message,
                      line: .line,
                      ignorable: .ignorable,
                      identifier: .identifier
                    }
                );
            (.[1] | errs(.)) as $targetErrors
            | (.[0] | errs(.)) as $prErrors
            | $targetErrors
            | map(
                select(
                  ($prErrors | index(.)) == null
                )
              )
        run: |
          jq -s -f <(printf '%s' "$JQ_FILTER") pr-tip-phpstan.json target-branch-phpstan.json > removed-errors.json

      - name: Show summary of deltas
        run: |
          echo "Introduced files/errors:"
          jq . introduced-errors.json || true
          echo
          echo "Removed files/errors:"
          jq . removed-errors.json || true
